---
layout: post
title: "Tree-walk put in a Nutshell"
tags: functional offtopic
---

In the current semester I work for Software Language Engineering on a very nice project: traversing trees in a not so common manner. The approach is called "tree walking" and behaves like a [nuthatch](https://en.wikipedia.org/wiki/Nuthatch) (_sitta europaea_) to go through a tree.

I created a simple and self-contained implementation of this scheme in [Haskell](https://www.haskell.org/). In my repo [here](https://github.com/maxstrauch/sle-tree-walk) you'll find all material including the presentations and the source code.

<!--more-->

What I really like about this project is the simplicity: the outcome is a presentation (probably on thursday this week) and a source file with the entire project contained (["nuthatch.hs"](https://github.com/maxstrauch/sle-tree-walk/blob/master/nuthatch.hs)). Functional programming languages make it very easy to write concise code by performing complex operations. Therefore the source file contains much more comments than code lines. But I like this expressiveness and also the nice features like list operations and pattern matching. When processing lists `foldr` and `map` are really handy.

And I like [my documentation](https://github.com/maxstrauch/sle-tree-walk/blob/master/README.md) ;-) of the project. Documentation is a really important thing in order to provide an entry into the structure of the project to new people or even to yourself if you forgot about it. Please trust me if I say: documentation is as important as the source code itself.

_This is only a short post since I'm very busy with exams. But I'll be back soon with many new things!_